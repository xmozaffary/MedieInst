1-nov
Repetition
    -Filstruktur
        projekt
            index.html- varför ligger den här? 
            src
                js
                css

    -main.js
        -variable
            -let - man kan ändra efterhand
            -const - man kan inte ändra efterhand
            -var - detta fanns från början men man använder inte längre.
            var fungerar överllt
        -regler för variabler
            -Beskrivande
            -Lower caml casing
            -Engelska
            -Unika
        -värde till variable
            = 0;  --> number
            = "hej"; --> string
            = true; --> boolean
        -använde varable
            då skriver man bara variable namnet för att använda varable och det ska vara utan sitattecken.
            om man vill skriva text skriver man i sitattecken

        -Operationer
            +, -, *, % 
            Jämförelse --> <, >, ===, == 
            jämförelse använder man främst i if satser. när man jämförar något i if satser t ex får man alltid true eller false, inget annat.
            när man jämförer två olika datatyper i if satser så få man alltid false och då koden går inte genom if satsen, den hoppar till else istället.
            if("text" == tal) fel, if(ta == tal) rätt. man ska förstå varabelerna 
            det finnns || , && också



DOM
    defer i script taget betyder att js koden väntar tills hela sidan körs klar.
    -vi har index.html
    -vi har Browser
    och sen finns det något i mellan. spm kallas DOM- document object model
    när man oppnar browser så ser man DOM
    man komma åt det med js, så när man skriver documnet så kommer man åt DOM.
    nu när vi vet att det finns DOM så kan vi göra vad vi vill.


Hitta
    -exampel: 
        <div id="container">
            apple
        </diva>

        <script>
            docoment.getElementById("container"); sökresultat 
        </script>

        vi har en div med id conainer och sen har vi hittad diven med divens id och nu kan vi göra vad som helst med den.
        drink.innreHtml= "banana";

        hur skriva css i js/lägga till en class i en tag
            drink.className = "fruit"

        img tag har inte inrreHtml så hur ändrar den då?

Skapa
    - <div id="container"> jag vill hitta denna diven

      </div>

      <script>
        const contaienr = documnet.getElemnetById("container");
        const spanTag = document.creatElement("span");
        spanTag.innreHtml = "Lorem";

        container.append(child(spanTag))
      </script>


    -const Container = document.getElementById("container");
    -const box = document.creatElement("div"); --> box = <div></div>
    -connst igmTag = document.creatElement("img"); --> imgTag = <img>'
    -imgtag.src = "....."; förändra imgTaget
    -imgtag.alt = ".....";

    nu vill jag lägga in imgTaget i div aget.
        box.appentChild(igmtag); nu finns det i div taget
    
    för att container id ska synas så skriver vi
        -container.appendchild(box); nu finns box i container och man kan se den i webbläsaren

Funktioner
    -Vad är en funktion?
        är en behållare/variable( en variable som inte innehåller number eller string och så vidare utan innehåller kode)

    skapa finction
        värdet av en funktion är det som ligger mellan musvingar
        const awesmeness = {
            många rader koder
            ----------
            -----------
            ---------
        }

    Hur skriver man en funktion?
        -det finns två säät att skriva funktion: första sättet:
            function namn på fnction(){

            }
        -andra sättet:
            man skappar en variable
            const namn på varable funktion/variable() =>{

            }
        när man väljer ett sätt så måste man skriva på det sätt hela projektet.

        när man skriver detta så kommer detta att köras.
        man ska anropa eller skriva onload i body
        använda kallas också att anropa EN = call function
            hur anropa?
            man skriver funktionens namn genom parantes.
                ex --> awsesamness()
    syftet?
        man kan återanvända den.
        dela upp våra kod för göraa lättare att läsa koden, lättare att förstå och felsöka.

    example på function på första sättet
        function awesamness(text){ text är en variable som heter parameter
            console.log(text); här skivas ut i browser innehållet i variable.
        }

    anropa functionen på första sättet
        awesamness("Hej") den som man skickar i funktion heter argumnet

        man kan anropa samma funktion med olika aroment
        man kan ha många parameter och måste separeras med comma ( , )
        man måste lika många argoment som parameter i funktion
    
    exampel på funktion på andra sätte:
        -const awesomeness = (parameter, parameter) =>{

        }

        det fungerar på samma sätt


    functionen sum.
        function sum(x,y){
            x + y; den bara försvinenr 
            const s = x + y; nu finns det i a variable
            return s, nu slutar vi funktione och skicka resultatet.
                på det sätt kan man skicka en variable utanför funktion (return s,)
                man kan också skriva return x + y, det samma sak om man skriver const s = x + y coh den skicka den i väg.
        }

        här kan man anropa funktionen
            sum(4,5);
            resultatet av funktionen kan man spara i av varabler
            const s = sum(5,6); variable s här är inte samma sak som variablen s i funtionen pgv kodblocket


hitta saker i DOM:en
skapa saker i DOM:en
ändra saker i DOM:en